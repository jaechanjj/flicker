plugins {
    id 'java'  // Java 플러그인을 추가하여 프로젝트를 Java로 구성
    id 'org.springframework.boot' version '3.3.3'  // Spring Boot 플러그인 추가 및 버전 설정
    id 'io.spring.dependency-management' version '1.1.6'  // Spring의 의존성 관리를 위한 플러그인
}

group = 'com.flicker'  // 프로젝트 그룹 ID 설정
version = '0.0.1-SNAPSHOT'  // 프로젝트 버전 설정

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)  // Java 17 버전을 사용하도록 설정
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor  // annotationProcessor의 설정을 compileOnly에도 확장
    }
}

repositories {
    mavenCentral()  // Maven Central 저장소에서 의존성을 가져오도록 설정
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'  // Spring Data JPA 의존성 추가 (JPA 사용을 위한 기본 설정)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'  // Spring Data Redis 의존성 추가 (Redis 사용을 위한 설정)
    implementation 'org.springframework.boot:spring-boot-starter-web'  // Spring Web 의존성 추가 (웹 개발을 위한 기본 설정)
    implementation 'org.springframework.kafka:spring-kafka'  // Spring Kafka 의존성 추가 (Kafka와 연동하기 위한 설정)

    compileOnly 'org.projectlombok:lombok'  // Lombok 라이브러리를 컴파일 시에만 사용 (코드 생성을 위한 의존성)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'  // 개발 환경에서만 사용되는 DevTools (핫스왑 기능을 제공)
    runtimeOnly 'com.mysql:mysql-connector-j'  // MySQL JDBC 드라이버 (런타임에만 필요)

    annotationProcessor 'org.projectlombok:lombok'  // Lombok 어노테이션 프로세서를 추가하여 코드 자동 생성 지원

    testImplementation 'org.springframework.boot:spring-boot-starter-test'  // Spring Boot의 테스트 지원 라이브러리
    testImplementation 'org.springframework.kafka:spring-kafka-test'  // Kafka 테스트 라이브러리
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'  // JUnit 플랫폼 런처 (테스트 실행을 위한 의존성)

    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'  // P6Spy 쿼리 로깅을 위한 라이브러리 (쿼리 실행 시 인자값을 함께 출력)
    implementation 'org.springframework.boot:spring-boot-starter-validation'  // 유효성 검증을 위한 Spring Boot 검증 라이브러리

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'  // QueryDSL JPA 모듈 추가 (Jakarta 버전)
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"  // QueryDSL APT 설정 (QueryDSL 코드 생성기)
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"  // Jakarta 어노테이션 API 의존성 추가 (Jakarta 어노테이션을 위한 설정)
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"  // Jakarta Persistence API 의존성 추가 (JPA를 사용하기 위한 Jakarta API 설정)

    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'  // Spring Data MongoDB 의존성 추가 (MongoDB 사용을 위한 설정)
}

clean {
    delete file('src/main/generated')  // Gradle clean 시 QueryDSL QClass가 생성되는 디렉터리 삭제
}

tasks.named('test') {
    useJUnitPlatform()  // JUnit 플랫폼을 사용하여 테스트 실행
}
